var documenterSearchIndex = {"docs":
[{"location":"#LowDiscrepancySampling","page":"Home","title":"LowDiscrepancySampling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LowDiscrepancySampling.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here are two examples of how to use the package","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LowDiscrepancySampling\nusing CairoMakie\n\nP = 300\nN = 10\n\nH = hammersley_set(P, N)'\n\nlet\n    f = Figure(resolution = (1200, 400))\n    ax1 = Axis(f[1, 1], title = \"H1 vs H2\", xlabel = \"H1\", ylabel = \"H2\")\n    scatter!(ax1, H[1, :], H[2, :], color = :red, markersize = 5)\n\n    ax2 = Axis(f[1, 2], title = \"H1 vs H3\", xlabel = \"H1\", ylabel = \"H3\")\n    scatter!(ax2, H[1, :], H[3, :], color = :blue, markersize = 5)\n\n    ax3 = Axis(f[1, 3], title = \"H1 vs H4\", xlabel = \"H1\", ylabel = \"H4\")\n    scatter!(ax3, H[1, :], H[4, :], color = :magenta, markersize = 5)\n\n    f\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LowDiscrepancySampling\nusing CairoMakie\n\nn = 1000 \n\ncorput_points = [ (corput(i, 2), corput(i, 3)) for i in 1:n ]\n\nhammersley_points = hammersley_set(n, 2)\n\nlet \n    f = Figure(resolution = (800, 400))\n    ax1 = Axis(f[1, 1], title = \"Corput Sequence (2D)\", xlabel = \"x\", ylabel = \"y\")\n    scatter!(ax1, first.(corput_points), last.(corput_points), color = :dodgerblue, markersize = 8)\n\n    ax2 = Axis(f[1, 2], title = \"Hammersley Set (2D)\", xlabel = \"x\", ylabel = \"y\")\n    scatter!(ax2, hammersley_points[:, 1], hammersley_points[:, 2], color = :orangered, markersize = 8)\n    f\nend\n","category":"page"},{"location":"#LowDiscrepancySampling.corput","page":"Home","title":"LowDiscrepancySampling.corput","text":"corput(n::Int, b::Int=2)\n\nComputes the n-th number in the van der Corput sequence in base b using digit reversal. Follows the standard definition:     qₙ = ∑ dₖ(n) * b^(-k-1)\n\n\n\n\n\n","category":"function"},{"location":"#LowDiscrepancySampling.halton-Tuple{Int64, Int64}","page":"Home","title":"LowDiscrepancySampling.halton","text":"halton(n::Int, d::Int)\n\nGenerates the nth Halton sequence vector in d dimensions.\n\n\n\n\n\n","category":"method"},{"location":"#LowDiscrepancySampling.hammersley_set-Tuple{Int64, Int64}","page":"Home","title":"LowDiscrepancySampling.hammersley_set","text":"hammersley_set(n, d)\n\nGenerate the Hammersley point set of n points in d dimensions. The first dimension is a uniform grid, the remaining dimensions use the radical inverse with different bases.\n\nArguments\n\nn::Int: Number of points\nd::Int: Number of dimensions (d >= 2)\n\nReturns\n\nArray{Float64,2}: n x d matrix of points\n\n\n\n\n\n","category":"method"}]
}
